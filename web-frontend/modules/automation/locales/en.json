{
  "sidebarComponentAutomation": {
    "createAutomationWorkflow": "New workflow"
  },
  "createAutomationWorkflowModal": {
    "header": "Create workflow",
    "submit": "Add workflow"
  },
  "automationWorkflowForm": {
    "defaultName": "Workflow",
    "nameTitle": "Name",
    "nameSubtitle": "Unique name of the workflow",
    "namePlaceholder": "Enter a name..."
  },
  "duplicateAutomationWorkflowJobType": {
    "name": "Duplicate automation workflow",
    "duplicating": "Duplicating",
    "duplicatedTitle": "Workflow duplicated"
  },
  "automationWorkflowErrors": {
    "errorNameNotUnique": "A workflow with this name already exists"
  },
  "trashType": {
    "workflow": "workflow",
    "automation": "automation"
  },
  "generalSettings": {
    "titleOverview": "General",
    "nameLabel": "Automation name",
    "notificationLabel": "Notifications",
    "notificationCheckboxLabel": "Get notified when this automation fails",
    "cantUpdateAutomationTitle": "Couldn't Update Automation",
    "cantUpdateAutomationDescription": "Sorry, could not update the automation."
  },
  "integrationSettings": {
    "title": "Integrations",
    "noIntegrationMessage": "You have not yet created any integrations. They can be created by adding data source, action or user authentication.",
    "integrationMessage": "You can create new integrations by adding data source, action or user authentication."
  },
  "automationHeader": {
    "startTestRun": "Start test run",
    "stopTestRun": "Stop test run",
    "publishBtn": "Publish",
    "settingsBtn": "Settings",
    "historyBtn": "History",
    "switchLabelDraft": "Draft",
    "switchLabelDisabled": "Disabled",
    "switchLabelPaused": "Paused",
    "switchLabelLive": "Live",
    "lastPublished": "Last published"
  },
  "dataProviderType": {
    "previousNode": "Previous node"
  },
  "nodeSidePanel": {
    "labelTitle": "Label"
  },
  "historySidePanel": {
    "title": "History",
    "noRunsTitle": "No runs yet",
    "noRunsDescription": "When this workflow has run, the results will be shown here.",
    "statusSuccess": "Ran successfully",
    "statusError": "Failed to run",
    "statusDisabled": "Disabled by Baserow",
    "completedInSeconds": "Completed in {s} seconds.",
    "completedInLessThanSecond": "Completed in less than 1 second.",
    "testRun": "Test"
  },
  "nodeType": {
    "triggerDeletionError": "Triggers cannot be deleted, only replaced.",
    "localBaserowRowsCreatedLabel": "Rows are created in {tableName}",
    "localBaserowRowsUpdatedLabel": "Rows are updated in {tableName}",
    "localBaserowRowsDeletedLabel": "Rows are deleted in {tableName}",
    "localBaserowCreateRowLabel": "Create a row in {tableName}",
    "localBaserowUpdateRowLabel": "Update a row in {tableName}",
    "localBaserowDeleteRowLabel": "Delete a row in {tableName}",
    "localBaserowGetRowLabel": "Read a row in {tableName}",
    "localBaserowListRowsLabel": "List rows in {tableName}",
    "localBaserowAggregateRowsLabel": "Summarize rows in {tableName}",
    "httpRequestLabel": "Send an HTTP request",
    "smtpEmailLabel": "Send an email",
    "routerLabel": "Follow 1 of {edgeCount} branches",
    "routerDefaultEdgeLabelFallback": "Default",
    "routerWithOutputNodesDeleteError": "Cannot be deleted until its {outputCount} output nodes are removed.",
    "routerWithOutputNodesReplaceError": "Cannot be replaced until its {outputCount} output nodes are removed.",
    "periodicTriggerLabel": "Periodic trigger"
  },
  "workflowNode": {
    "actionDelete": "Delete",
    "actionReplace": "Replace",
    "actionDuplicate": "Duplicate",
    "actionConfigure": "Configure",
    "beforeLabelTrigger": "Starts when",
    "beforeLabelAction": "Then",
    "beforeLabelCondition": "If condition is met",
    "beforeLabelConditionDefault": "If no condition(s) are met",
    "moreEdit": "Edit",
    "moreReplace": "Replace",
    "nodeOptions": "Node options",
    "displayLabelDebug": "ID: {id} | Prev: {previousNodeId} | {outputUid}"
  },
  "workflowAddNode": {
    "displayTitle": "Create automation node",
    "displayTitleDebug": "ID: {id} | {outputUid}"
  },
  "workflowNodeContext": {
    "searchPlaceholderTrigger": "Search for a trigger...",
    "searchPlaceholderActions": "Search for actions...",
    "noResults": "No results found"
  },
  "serviceType": {
    "periodicTrigger": "Periodic trigger",
    "periodicTriggerDescription": "Triggers the workflow on a periodic basis at specified intervals",
    "periodicTriggerTriggeredAt": "Triggered at",
    "errorIntervalMissing": "An interval is required.",
    "coreHTTPTrigger": "HTTP trigger",
    "coreHTTPTriggerDescription": "Receive HTTP requests to trigger workflows"
  },
  "periodicTriggerServiceForm": {
    "intervalLabel": "Interval",
    "intervalHelper": "Choose how frequently you want this workflow to run",
    "everyMinute": "Every minute",
    "everyHour": "Every hour",
    "everyDay": "Every day",
    "everyWeek": "Every week",
    "everyMonth": "Every month",
    "hour": "Hour",
    "minute": "Minute",
    "dayOfWeek": "Day of week",
    "dayOfMonth": "Day of month",
    "hourPlaceholder": "0-23",
    "minutePlaceholder": "0-59",
    "dayOfMonthPlaceholder": "1-31",
    "minuteHelper": "This workflow will run every minute",
    "hourHelper": "This workflow will run every hour at the specified minute in your local timezone ({timezone})",
    "dayHelper": "This workflow will run every day at the specified time in your local timezone ({timezone})",
    "weekHelper": "This workflow will run every week on the specified day and time in your local timezone ({timezone})",
    "monthHelper": "This workflow will run every month on the specified day and time in your local timezone ({timezone})",
    "deactivatedTitle": "Periodic trigger deactivated",
    "deactivatedText": "This periodic trigger has been automatically deactivated due to consecutive failures."
  },
  "simulateDispatch": {
    "sampleDataLabel": "Output",
    "triggerNodeAwaitingEvent": "This trigger node is waiting for an event.",
    "errorNodeNotConfigured": "The Node must be configured before it can be tested.",
    "errorPreviousNodeNotConfigured": "All previous nodes must be configured.",
    "errorPreviousNodesNotTested": "All previous nodes must be tested.",
    "buttonLabelShowPayload": "Show payload",
    "buttonLabelTest": "Test event",
    "buttonLabelTestAgain": "Test event again",
    "testNodeDescription": "Test this event to confirm the configuration is correct. Data from this test can be used in later steps.",
    "sampleDataModalTitle": "Payload for {nodeLabel}",
    "sampleDataModalSubTitle": "JSON payload",
    "sampleDataCopy": "Copy",
    "sampleDataCopied": "Payload copied to clipboard"
  }
}
